项目规范

MUST
    * 代码保证0警告！不管用什么IDE，代码风格保持一致！

    * 负责渲染页面的视图和拉取数据API要分开在不同的controller里边，这样容易控制，
      比如API接口只认证不负责自动登陆

    * 用户的行为要抽象出来，封装一系列onXxxx的方法，有利于对用户行为进行记录、
      增加业务逻辑、组合功能，千万不要把所有逻辑堆在一个方法里边

    * 善用面向对象，多态胜于if-else 不需要对象的一律用静态对象
      有特定行为的要单独抽象出来，比如有些页面需要自动登陆，有些页面不需要自动
      登陆，那就可以定义两个不同的基类，而不是通过很多if 判断来实现此功能

    * 做功能注意区分平台差异，微信，PC，APP等

    * 变量、函数、文件等命名很重要！要有语义，命名的好坏决定你对业务的理解和对
      实现抽象的好坏

    * 用户请求/API都要的提示（可以模糊）但是绝对不能出错了又没有提示。

    * 代码一定要照顾上下文，保持风格一致

    * 实现方案在初期就要尽量保证最优，不要“以后有时间再优化”！
      Cache一开始就要考虑

    * 控制器内不要写太多业务逻辑，把业务逻辑放在model，model不止是操作DB
      控制器只负责组织数据，渲染到不同的页面上

    * 有含义的数字一定要有名字，不能出现magic number

    * 同一个用户N秒内只能下一单（不管什么样的订单），防止扣除余额之类的发生并发事务，导致数据不一致
SHOULD
    * 善用输出日志，要有语义、有数据、有上下文，尽量不要输出中文

    * 调试日志用完即删！线上如果增加日志跟踪就要定期观察，不要加了日志就没下文了！

    * 复杂的功能开发人员要有测试预案
    
    * 敏感信息redis的数据要从主库(w)中读，免得更新数据时操作不是原子性导致数据不一致
      反之一律读从库(r)
MAY

NOTE
    * 财务要求流水要明晰

REMARK
    * order_id  订单ID 用户在商城系统下的订单号
    * trade_no  交易号 用于提交给第三方支付的唯一标识，同一个订单再次支付trade_no会不同

